Python Assignment: Week 6
        Part A: due Thursday, October 3rd, by 11:45pm
        (Easy week due to CSCI 101 exam - WOO HOO!)
Introduction
Welcome to your assignment for Week 6 of CSCI 102! We have an easy week this week (due to the CSCI 101 exam on October 3rd) - only one assignment! You should do this assignment on your own time and submit to Canvas by Thursday 11:45pm. This is your Week 6 CSCI 102 Assignment page.

Part A (due by Thursday, October 3rd): 6 points
Assignment: Collatz Conjecture (4 points)
To get started, open IDLE and then create a New File via the File menu. We suggest you immediately save this file in the directory you created to manage all your Python Labs this semester (e.g., CSCI102/PythonLabs). Save this file as Week6-collatz.py.

For this exercise, you will work with the Collatz conjecture. Essentially it states the following: for any positive integer n, if we repeatedly apply the function described below, n will eventually reach 1.
                        
For example, if n is 13, the following sequence of numbers will result according to the Collatz conjecture: 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. Your task is to write a program that will output the sequence of numbers generated by the Collatz conjecture function for any positive integer n entered by the user.
Lab I/O Format
Throughout this semester we will use a specific Lab Input/Output Format. This format is described below:
When prompting for input, use the prompt string WORD>, where WORD is a single, uppercase word which describes the input. For example, this lab might choose: NUMBER>.
When providing output that will be graded, start the line with OUTPUT. Think of this as "boxing your answer" on a math worksheet; it lets us quickly find your answer. Our grading script will skip any output lines that do not start with OUTPUT.
You are welcome (and should!) have other output lines that do not begin with OUTPUT; while our grading script will ignore these, good programmers include print statements that are informational to the user of the program.
Example Execution #1
Enter a positive integer to generate its Collatz Conjecture:
INPUT> 13

The Collatz Conjecture for 13 is:
OUTPUT 13 40 20 10 5 16 8 4 2 1

Example Execution #2
Enter a positive integer to generate its Collatz Conjecture:
INPUT> 200

The Collatz Conjecture for 200 is:
OUTPUT 200 100 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1

Comments
All Python files submitted to Canvas should include a header with your name, section, and assignment info. Submissions without this header will lose 1 point. Here's an example:
        #   Tracy Camp
        #  ​CSCI 102 – Section C
        #   Week 6 - Part A
Additional Comment (2 points)
Python is almost unique among modern programming languages in that “white space” (spaces, tabs, and carriage return/line feed) can have syntactic meaning. Thus, Python uses indentation to separate blocks of code. Most other procedural programming languages use some mechanism built into the language syntax to separate blocks of code, e.g., curly braces (“{“ and “}”).

Using online resources such as the Python wiki, explore the rational for Python to use indentation in this way. Then add 2-3 sentences to your Week6-collatz.py file (as a multi-line comment) on what you learned. Please add this information below your name, section, and assignment info header. Please also include the URL(s) of any sources you use.
Submission
Once you are satisfied with your solution to this lab, you need to submit the file to Canvas. In Canvas, go to Assignments > Week6 and upload Week6-collatz.py.

This lab is worth 6 points (4 points for the code and 2 points for the additional comment). To receive full credit, your code must include the additional comment requested, execute in Python 3, and you must submit a single file (your Python code file). In addition, your code must follow the Lab I/O Format.

Whenever you submit something to Canvas, we strongly recommend you always double check what you submitted actually got submitted correctly (e.g., did the file upload correctly? did you submit the correct file? etc.) If your submission is incorrect, it's on you.
