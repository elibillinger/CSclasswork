Python Lab 7: Password Validator
Due Thursday, October 24th, by 11:59pm
Introduction
To get started, open IDLE and then create a New File via the File menu. We suggest you immediately save this file in the directory managing all your Python Labs this semester. Please save this file with the following name: Lab7-validator.py.
Assignment
Passwords are nifty things, e.g., they protect your private information and give a user access to information or programs (access that isn't available to all). Is your password a "good" password or a "bad" password? Some online websites try and help you create a "good" password, e.g., they require a certain number or special characters, numbers, and letters (some upper and some lower).

The purpose of this lab is to create a program that will:
take a password (either a user generated OR a randomly generated password),
ensure the password is valid,
determine the strength of the password, and
inform the user of the strength.
Your program should:
Ask a user for a password to validate (choice 1) OR ask if they would prefer to have a randomly generated password (choice 2).
If user enters 1, ask the user to enter a password
check to be sure the pasword is valid
Must be at least 8 characters long
Must contain at least one number
Must contain at least one special character
If the password is not valid, inform the user of this fact and quit the program.
If user enters 2, generate a random valid string of length 12. This string should have eight letters, two numbers, and two special characters. Your random string could be generated by adding a string of random letters, a string of random numbers, and a string of random special characters.
Determine the strength of the password. You determine the password strength by calculating a strength score that is determined by:
number (n) of letters: score += (n*4)
number (n) of numbers: score += (n*5)
number (n) of special characters: score += (n*6)
number (n) of vowels: score -= (n*3). Note: vowels reduce the score.
score += (x*2), where x = (number of uppercase letters - number of lowercase letters). Note: it is possible for x<0.
Display the strength to the user.
You will likely need several loops and conditionals to determine the strength of a given password. Feel free to search the internet to learn if there is an easy way of doing any of these checks. If you do use a resource online, add the details of the resource as a comment in your code.

While your password strength checker is simple compared to one that is used for your Twitter account, you can see how good password checkers are created. If you'd like to learn more about other password checks that may be done, see The Password Meter. In the code you submit, please ONLY implement the checks defined above; you are, however, welcome to add more checks after you submit your code to Canvas!

Hint: there are a couple different ways that you could generate a string of random letters, random digits, or special characters. See the end of Python Video #14: RNG for one idea. Other ways also exist using these string constants: string.ascii_letters, string.digits, string.punctuation.
Password Strength
The password strength should be defined by:
        score < 20: Weak+
        20 <= score < 40: Weak
        40 <= score < 60: Good
        60 <= score < 80 : Strong
        80 <= score : Strong+

UPDATE: If you haven't yet submitted your code to this assignment, please include using a seed with your random number generator. This will make the grader's life WAY easier. If you've already submitted your code, you won't be marked down for not having this. How you can use a seed is shown next, as an example.
my_seed = int(input("Number to initialize the random generator: "))
random.seed( my_seed )

Lab I/O Format
Thoughout this semester we use a specific Lab Input/Output Format. This format is described below:
When prompting for input, use the prompt string WORD>, where WORD is a single, uppercase word which describes the input. For example, your WORD in this lab might be: CHOICE> and PASSWORD>.
When providing output that will be graded, start the line with OUTPUT. Think of this as "boxing your answer" on a math worksheet; it lets us quickly find your answer. Our grading script will skip any output lines that do not start with OUTPUT.
You are welcome (and should!) have other output lines that do not begin with OUTPUT; while our grading script will ignore these, good programmers include print statements that are informational to the user of the program.

Example Execution 1:
Would you like to check your own password or a random one? (1 or 2)
CHOICE> 1
Enter a password to validate:
PASSWORD> Banana
Validating the password Banana
The password Banana is an invalid password
OUTPUT INVALID


Example Execution 2:
Would you like to check your own password or a random one? (1 or 2)
CHOICE> 1
Enter a password to validate:
PASSWORD> Abe1e#eb
Validating the password Abe1e#eb
The password Abe1e#eb is a Weak+ password
OUTPUT Weak+


Example Execution 3: (note: seed does NOT produce this password)
Would you like to check your own password or a random one? (1 or 2)
CHOICE> 2
Number to initialize the random generator:
SEED> 12345
Validating the password
The password erTljpqB97(~ is a Good password
OUTPUT Good


Example Execution 4: (note: seed does NOT produce this password)
Would you like to check your own password or a random one? (1 or 2)
CHOICE> 2
Number to initialize the random generator:
SEED> 12345
Validating the password
The password ajoNeiai45)) is a Weak password
OUTPUT Weak


Comments
All Python files submitted to Canvas should include a header with your name, section, and assignment info. These details should be WITHIN the file you upload to Canvas. Submissions without this header will lose 1 point. Here's an example:
        #   Tracy Camp
        #  ​CSCI 101 – Section G
        #   Python Lab 7
Submission
Once you are satisfied with your solution to this lab, you need to submit the file to Canvas. In Canvas, go to Assignments > Lab7 and upload Lab7-validator.py.

Note: this lab is worth 8 points. To receive full credit, your code must execute in Python 3, you must submit a single file (your Python code file), and you must have the input/output match the lab requirements.

Whenever you submit something to Canvas, we strongly recommend you always double check what you submitted actually got submitted correctly (e.g., did the file upload correctly? did you submit the correct file? etc.) If your submission is incorrect, it's on you.
